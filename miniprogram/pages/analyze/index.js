// pages/analyze/index.js
const { toBase64Payload, localHeuristicPick } = require('../../utils/media');
const { post } = require('../../utils/request');
const { API_PATHS } = require('../../utils/config');

Page({
  data: {
    percent: 0,
    loadingText: 'ÂÖâÁ∫ø„ÄÅÊûÑÂõæ„ÄÅÁîªË¥®„ÄÅ‰∫îÂÆò„ÄÅÊ∞õÂõ¥‚Ä¶‚Ä¶'
  },

  onLoad: function (options) {
    console.log('üîç ÂàÜÊûêÈ°µÈù¢Âä†ËΩΩÔºåÂºÄÂßãÊ£ÄÊü•Êï∞ÊçÆ...');
    
    // Ëé∑ÂèñÂÖ®Â±ÄÂ∫îÁî®ÂÆû‰æã
    const app = getApp();
    
    // ËØ¶ÁªÜË∞ÉËØïÂÖ®Â±ÄÊï∞ÊçÆ
    console.log('üìä ÂÖ®Â±ÄÊï∞ÊçÆÊ£ÄÊü•:');
    console.log('- app.globalData:', app.globalData);
    console.log('- app.globalData.photos:', app.globalData.photos);
    console.log('- app.globalData.fileKeys:', app.globalData.fileKeys);
    console.log('- app.globalData.analysisResult:', app.globalData.analysisResult);
    
    // Ê£ÄÊü•ÁÖßÁâáÊï∞ÊçÆ
    const photos = app.globalData.photos || [];
    const fileKeys = app.globalData.fileKeys || [];
    
    console.log(`üì∏ ÁÖßÁâáÊï∞ÊçÆÊ£ÄÊü•: Êï∞Èáè=${photos.length}`);
    console.log(`üîë Êñá‰ª∂ÈîÆÊ£ÄÊü•: Êï∞Èáè=${fileKeys.length}`);
    
    if (photos.length === 0 && fileKeys.length === 0) {
      console.error('‚ùå Ê≤°ÊúâÁÖßÁâáÊï∞ÊçÆÂíåÊñá‰ª∂ÈîÆÔºåÊòæÁ§∫ÈîôËØØÂπ∂ËøîÂõû');
      wx.showToast({
        title: 'Ê≤°ÊúâÈÄâÊã©ÁÖßÁâá',
        icon: 'none',
        duration: 2000
      });
      
      setTimeout(() => {
        wx.navigateBack();
      }, 2000);
      return;
    }
    
    if (photos.length === 0 && fileKeys.length > 0) {
      console.log('‚ö†Ô∏è ÊúâÊñá‰ª∂ÈîÆ‰ΩÜÊ≤°ÊúâÁÖßÁâáÊï∞ÊçÆÔºåÂ∞ùËØïÈáçÂª∫ÁÖßÁâáÊï∞ÊçÆ');
      // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†ÈáçÂª∫ÁÖßÁâáÊï∞ÊçÆÁöÑÈÄªËæë
    }
    
    console.log('‚úÖ Êï∞ÊçÆÊ£ÄÊü•ÈÄöËøáÔºåÂºÄÂßãAIÂàÜÊûêÊµÅÁ®ã');
    this.startAnalysis(photos);
  },

  startAnalysis(photos) {
    // ÂêØÂä®ËøõÂ∫¶Êù°Âä®Áîª
    this.startProgressAnimation();
    // ÂºÄÂßãAIÂàÜÊûê
    this.analyzePhotos(photos);
  },

  startProgressAnimation() {
    let progress = 5;
    this.progressTimer = setInterval(() => {
      progress = Math.min(95, progress + Math.random() * 5);
      this.setData({
        percent: Math.floor(progress)
      });
    }, 300);

    // ÂêØÂä®Âä†ËΩΩÊñáÊú¨Âä®Áîª
    const loadingTexts = ['ÂÖâÁ∫ø', 'ÊûÑÂõæ', 'ÁîªË¥®', '‰∫îÂÆò', 'Ê∞õÂõ¥'];
    let textIndex = 0;
    this.textTimer = setInterval(() => {
      textIndex = (textIndex + 1) % loadingTexts.length;
      const text = loadingTexts.slice(0, textIndex + 1).join('„ÄÅ') + '‚Ä¶‚Ä¶';
      this.setData({ loadingText: text });
    }, 800);
  },

  async analyzePhotos(photos) {
    try {
      console.log('ÂºÄÂßãAIÂàÜÊûêÔºåÁÖßÁâáÊï∞Èáè:', photos.length);
      
      // Ëé∑Âèñ‰ºöËØùID
      const app = getApp();
      const sessionId = app.globalData.session.id;
      
      let payload;
      
      // Ê£ÄÊü•ÊòØÂê¶ÊúâfileKeysÔºàÊñ∞ÁöÑ‰∏ä‰º†ÊñπÂºèÔºâ
      if (app.globalData.fileKeys && app.globalData.fileKeys.length > 0) {
        console.log('‚úÖ ‰ΩøÁî®Êñ∞ÁöÑ‰∏ä‰º†ÊñπÂºèÔºåfileKeys:', app.globalData.fileKeys);
        payload = {
          sessionId,
          fileKeys: app.globalData.fileKeys
        };
        console.log('üì¶ fileKeys payload:', payload);
      } else {
        console.log('‚ö†Ô∏è fileKeys‰∏çÂ≠òÂú®Ôºå‰ΩøÁî®‰º†Áªübase64ÊñπÂºè');
        console.log('üîç globalData.fileKeys:', app.globalData.fileKeys);
        console.log('üì∏ photosÊï∞ÊçÆ:', photos);
        // ÂáÜÂ§áÁÖßÁâáÊï∞ÊçÆÔºà‰º†ÁªüÊñπÂºèÔºâ
        payload = await toBase64Payload(photos);
        payload.sessionId = sessionId;
        console.log('üì¶ base64 payloadÂ§ßÂ∞è:', JSON.stringify(payload).length);
      }
      
      console.log('ÁÖßÁâáÊï∞ÊçÆÂáÜÂ§áÂÆåÊàê');
      
      // Ë∞ÉÁî®AIÂàÜÊûêÊé•Âè£
      console.log('ÂáÜÂ§áË∞ÉÁî®AIÊé•Âè£:', API_PATHS.AI_PICK);
      console.log('ËØ∑Ê±ÇpayloadÁªìÊûÑ:', Object.keys(payload));
      
      const response = await post(API_PATHS.AI_PICK, payload).catch(err => {
        console.error('‚ùå AIÂàÜÊûêÂ§±Ë¥•ÔºåÈîôËØØËØ¶ÊÉÖ:', err);
        console.error('ÈîôËØØÁ±ªÂûã:', typeof err);
        console.error('ÈîôËØØÊ∂àÊÅØ:', err.message);
        console.error('ÈîôËØØÁä∂ÊÄÅÁ†Å:', err.statusCode);
        console.error('ÈîôËØØÂìçÂ∫î:', err.data);
        console.error('ÈîôËØØÂ†ÜÊ†à:', err.stack);
        
        // Ê†πÊçÆÈîôËØØÁ±ªÂûãÊèê‰æõÂèãÂ•ΩÁöÑÈîôËØØ‰ø°ÊÅØ
        let userFriendlyMessage = 'AIÂàÜÊûêÂ§±Ë¥•ÔºåËØ∑ÈáçËØï';
        const errorMsg = err.message || err.errMsg || '';
        
        if (errorMsg.includes('timeout') || errorMsg.includes('Ë∂ÖÊó∂')) {
          userFriendlyMessage = 'ËØ∑Ê±ÇË∂ÖÊó∂ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•ÂêéÈáçËØï';
        } else if (errorMsg.includes('network') || errorMsg.includes('ÁΩëÁªú')) {
          userFriendlyMessage = 'ÁΩëÁªúËøûÊé•ÂºÇÂ∏∏ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúÂêéÈáçËØï';
        } else if (errorMsg.includes('500') || errorMsg.includes('ÊúçÂä°Âô®')) {
          userFriendlyMessage = 'ÊúçÂä°Âô®ÊöÇÊó∂ÁπÅÂøôÔºåËØ∑Á®çÂêéÈáçËØï';
        } else if (errorMsg.includes('401') || errorMsg.includes('403')) {
          userFriendlyMessage = 'ÊúçÂä°ËÆ§ËØÅÂ§±Ë¥•ÔºåËØ∑ËÅîÁ≥ªÁÆ°ÁêÜÂëò';
        } else if (errorMsg.includes('404')) {
          userFriendlyMessage = 'ÊúçÂä°ÊöÇÊó∂‰∏çÂèØÁî®ÔºåËØ∑Á®çÂêéÈáçËØï';
        }
        
        console.error('üîç ÂÖ∑‰ΩìÈîôËØØÂéüÂõ†:', errorMsg);
        
        // ÊòæÁ§∫ÂèãÂ•ΩÁöÑÈîôËØØÂØπËØùÊ°ÜÔºåÊèê‰æõÈáçËØïÈÄâÈ°π
        wx.showModal({
          title: 'Â§ÑÁêÜÂ§±Ë¥•',
          content: userFriendlyMessage,
          confirmText: 'ÈáçËØï',
          cancelText: '‰ΩøÁî®Êú¨Âú∞ÂàÜÊûê',
          success: (res) => {
            if (res.confirm) {
              // Áî®Êà∑ÈÄâÊã©ÈáçËØïÔºåÈáçÊñ∞ÂºÄÂßãÂàÜÊûê
              setTimeout(() => {
                this.analyzePhotos(photos);
              }, 1000);
            } else {
              // Áî®Êà∑ÈÄâÊã©‰ΩøÁî®Êú¨Âú∞ÂàÜÊûêÔºåÁªßÁª≠‰ΩøÁî®mockÊï∞ÊçÆ
              const mockResult = localHeuristicPick(photos);
              mockResult.isDemoData = true;
              this.handleAnalysisResult({ data: mockResult }, photos);
            }
          }
        });
        
        // ÊäõÂá∫ÈîôËØØ‰ª•ÈòªÊ≠¢ÂêéÁª≠Â§ÑÁêÜ
        throw err;
      });

      console.log('APIÂìçÂ∫î:', response);
      this.handleAnalysisResult(response, photos);

    } catch (error) {
      console.error('ÁÖßÁâáÂàÜÊûêÂ§±Ë¥•:', error);
      this.clearTimers();
      wx.showToast({
        title: 'ÂàÜÊûêÂ§±Ë¥•ÔºåËØ∑ÈáçËØï',
        icon: 'none'
      });
      setTimeout(() => {
        wx.navigateBack();
      }, 1500);
    }
  },

  handleAnalysisResult(response, photos) {
    const app = getApp();
    
    // ÊèêÂèñÁúüÂÆûÁöÑAIÂàÜÊûêÁªìÊûú
    const result = response.data || response;
    console.log('AIÂàÜÊûêÂÆåÊàêÔºåÁªìÊûú:', result);

    // ‰øùÂ≠òÂàÜÊûêÁªìÊûú
    app.globalData.aiResult = result;
    
    console.log('AIÁªìÊûúÂ∑≤‰øùÂ≠òÂà∞globalData:', app.globalData.aiResult);

    // Ê∏ÖÁêÜÂÆöÊó∂Âô®
    this.clearTimers();
    
    // ËÆæÁΩÆ100%ËøõÂ∫¶
    this.setData({ percent: 100 });

    // Âª∂ËøüË∑≥ËΩ¨ÔºåËÆ©Áî®Êà∑ÁúãÂà∞100%
    setTimeout(() => {
      wx.redirectTo({
        url: '/pages/recommend/index',
        fail: (err) => {
          console.error('Ë∑≥ËΩ¨Â§±Ë¥•:', err);
          wx.showToast({
            title: 'È°µÈù¢Ë∑≥ËΩ¨Â§±Ë¥•',
            icon: 'none'
          });
        }
      });
    }, 500);
  },

  clearTimers() {
    if (this.progressTimer) {
      clearInterval(this.progressTimer);
      this.progressTimer = null;
    }
    if (this.textTimer) {
      clearInterval(this.textTimer);
      this.textTimer = null;
    }
  },

  onUnload() {
    this.clearTimers();
  }
});